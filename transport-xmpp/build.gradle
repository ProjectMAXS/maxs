buildscript {
	repositories {
		mavenCentral()
		google()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:3.4.1'
	}
}

def keystoreProperties = new Properties()

def userKeystorePropertiesFile = new File(System.getProperty("user.home"), ".config/maxs/keystore.properties")
if (userKeystorePropertiesFile.exists()) {
	keystoreProperties.load(new FileInputStream(userKeystorePropertiesFile))
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
	keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def keystorePropertiesFileString = System.getProperty("keystorePropertiesFile")
if (keystorePropertiesFileString != null) {
	keystoreProperties.load(new FileInputStream(file(keystorePropertiesFileString)))
}

apply plugin: 'com.android.application'

repositories {
  mavenCentral()
  google()
  jcenter()
  mavenLocal()
  maven() {
	  url "https://igniterealtime.org/repo/"
  }
}

ext {
	signingKeystoreAvailable = keystoreProperties.getProperty('keyPassword') != null
}

android {
	compileSdkVersion 24

	defaultConfig {
		minSdkVersion 10
		targetSdkVersion 23
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			aidl.srcDirs = ['src']
			res.srcDirs = ['res']
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	signingConfigs {
		if (signingKeystoreAvailable) {
			release {
				keyAlias keystoreProperties['keyAlias']
				keyPassword keystoreProperties['keyPassword']
				storeFile file(keystoreProperties['storeFile'])
				storePassword keystoreProperties['storePassword']
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'),
				'proguard-project.txt'
			if (signingKeystoreAvailable) {
				signingConfig signingConfigs.release
			}
		}
		debug {
			minifyEnabled false
		}
	}

}

ext {
	smackVersion = '4.4.0-alpha3'
	minidnsVersion = '0.3.2'
	iespVersion = '0.0.2'
	smackVersionComponents = smackVersion.split()
	if (smackVersionComponents.length == 1) {
		smackAndroidExtensionsVersion = smackVersion
		smackExperimentalVersion = smackVersion
		smackTcpVersion = smackVersion
	} else {
		println("Smack unique snapshot versioning detected")
		smackAndroidExtensionsVersion = smackVersionComponents[0]
		smackExperimentalVersion = smackVersionComponents[1]
		smackTcpVersion = smackVersionComponents[2]
	}
}

dependencies {
	implementation "eu.geekplace.iesp:iesp-aar:$iespVersion"
	implementation "org.igniterealtime.smack:smack-android-extensions:$smackAndroidExtensionsVersion"
	implementation "org.igniterealtime.smack:smack-experimental:$smackExperimentalVersion"
	implementation "org.igniterealtime.smack:smack-tcp:$smackTcpVersion"
	implementation "org.minidns:minidns-dnssec:$minidnsVersion"
	implementation project(':memorizingTrustManager')
}

configurations {
	all*.exclude group: 'xpp3', module: 'xpp3'
}

task makePrebuild(type:Exec) {
	commandLine 'make', 'prebuild'
}

preBuild.dependsOn makePrebuild
