buildscript {
	repositories {
		mavenCentral()
		google()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:7.1.3'
	}
}

def keystoreProperties = new Properties()

def userKeystorePropertiesFile = new File(System.getProperty("user.home"), ".config/maxs/keystore.properties")
if (userKeystorePropertiesFile.exists()) {
	keystoreProperties.load(new FileInputStream(userKeystorePropertiesFile))
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
	keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def keystorePropertiesFileString = System.getProperty("keystorePropertiesFile")
if (keystorePropertiesFileString != null) {
	keystoreProperties.load(new FileInputStream(file(keystorePropertiesFileString)))
}

apply plugin: 'com.android.application'

repositories {
  mavenCentral()
  google()
  jcenter()
  mavenLocal()
  maven() {
	url 'https://www.igniterealtime.org/archiva/repository/maven/'
  }
}

ext {
	signingKeystoreAvailable = keystoreProperties.getProperty('keyPassword') != null
}

android {
	compileSdkVersion 24

	defaultConfig {
		minSdkVersion 19
		targetSdkVersion 23
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			aidl.srcDirs = ['src']
			res.srcDirs = ['res']
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	signingConfigs {
		if (signingKeystoreAvailable) {
			release {
				keyAlias keystoreProperties['keyAlias']
				keyPassword keystoreProperties['keyPassword']
				storeFile file(keystoreProperties['storeFile'])
				storePassword keystoreProperties['storePassword']
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'),
				'proguard-project.txt'
			if (signingKeystoreAvailable) {
				signingConfig signingConfigs.release
			}
		}
		debug {
			minifyEnabled false
		}
	}

}

ext {
	smackVersion = '4.4.6'
	minidnsVersion = '1.0.3'
	iespVersion = '0.0.2'
	uniqueSmackSnapshot = smackVersion.split('-').length >= 2
}

dependencies {
	implementation "eu.geekplace.iesp:iesp-aar:$iespVersion"
	implementation "org.igniterealtime.smack:smack-android-extensions:$smackVersion"
	implementation "org.igniterealtime.smack:smack-experimental:$smackVersion"
	implementation "org.igniterealtime.smack:smack-tcp:$smackVersion"
	implementation "org.minidns:minidns-dnssec:$minidnsVersion"
	implementation project(':memorizingTrustManager')

	if (uniqueSmackSnapshot) {
		// Gradle unique snapshot artifacts will delcare dependencies
		// to artifcats of subprojects the same build using non-unique
		// snapshot versions. This means that we will get the unique
		// snapshot of .e.g smack-tcp, but the artifact of smack-core
		// will be any matching non-unique snapshot.
		// Hence we use some gradle magic as workaround to strictly
		// pin the version to the unique snapshot.
		// See
		// - https://discuss.gradle.org/t/unique-snapshot-dependencies-for-projects-own-subproject-in-pom-not-declared/35692?u=flow
		// - https://discuss.gradle.org/t/how-to-force-a-dependency-version-while-also-substituting-a-transitive-dependency/26759/4?u=flow
		components.all {
			allVariants {
				withDependencies { deps ->
					deps.each { dep ->
						if (dep.group == 'org.igniterealtime.smack') {
							dep.version {
								strictly smackVersion
							}
						}
					}
				}
			}
		}
	}
}

configurations {
	all*.exclude group: 'xpp3', module: 'xpp3'
}

task makePrebuild(type:Exec) {
	commandLine 'make', 'prebuild'
}

preBuild.dependsOn makePrebuild
